<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Angela Fang&#39;s Blog</title>
    <link>http://angelafang.top/posts/</link>
    <description>Recent content in Posts on Angela Fang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 26 Feb 2020 20:27:40 +0800</lastBuildDate>
    
	<atom:link href="http://angelafang.top/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue浅析之构造选项</title>
      <link>http://angelafang.top/2020/vue%E6%B5%85%E6%9E%90%E4%B9%8B%E6%9E%84%E9%80%A0%E9%80%89%E9%A1%B9/</link>
      <pubDate>Wed, 26 Feb 2020 20:27:40 +0800</pubDate>
      
      <guid>http://angelafang.top/2020/vue%E6%B5%85%E6%9E%90%E4%B9%8B%E6%9E%84%E9%80%A0%E9%80%89%E9%A1%B9/</guid>
      <description>本篇文章介绍 Vue 实例的构造选项。主要内容有： 1:关于 options
2:options 之数据
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.1:关于 vue 选项数据之 computed 和 watch 的区别
3:options 之 DOM
4:options 之生命周期钩子
5:options 之资源
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5.1:options 之资源-directives 指令以及修饰符
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5.2:Vue模板的特点
6:options 之组合
7:options 之其他
8:vue 数据响应式的理解
10:关于 vue 选项资源之 directives 指令
1:options 关于 Vue 的选项 options 分为六大类，分别是数据，DOM，生命周期钩子，资源，组合，其他。每类中具体又有很多属性。
数据中有 data，props，propsData，computed，methods，watch；DOM 中有 el，template，render，renderError；
生命周期钩子中有 beforeCreate，created，beforeMount，mounted，beforeUpdate，updated，activated，deactivated，beforeDestroy，destroyed，errorCaptured；
资源中有 directives，filters，components；
组合中有 parent，mixins，extends，provide / inject；
其它中有 name，delimiters，functional，model，inheritAttrs，comments。
2：options 之数据 选项数据之 data：可以是一个对象或函数，但是组件的定义只接受函数。它就是 vue 实例的数据对象。大概来说，data 应该只能是数据。实例创建完成之后，可以直接使用 vm.$data 去访问原始数据对象。而且vm.$data.a 也可以写成 vm.a。在创建实例的时候，直接给实例添加这个 data 属性，属性值就为需要的数据。另外该属性可以用\$.mount 去代替。</description>
    </item>
    
    <item>
      <title>浅析vue</title>
      <link>http://angelafang.top/2020/%E6%B5%85%E6%9E%90vue/</link>
      <pubDate>Mon, 17 Feb 2020 17:38:54 +0800</pubDate>
      
      <guid>http://angelafang.top/2020/%E6%B5%85%E6%9E%90vue/</guid>
      <description>本篇文章是关于 vue 的介绍之一，主要讲一下 Vue 两个版本的区别和使用方法。
1：两个版本对应的文件名 完整的 vue 版本名字是 vue.js,非完整版本也就是仅运行时版本名字是 vue.runtime.js，加了一个 runtime。
当我们在生产环境的时候，即把代码打包上线上正式环境使用，无论用的是完整版本还是非完整版本，都要使用加了 mini 的版本（即 vue.mini.js 或者 vue.runtime.mini.js）。因为加了 mini 的，会去掉注释，体积变小。
完整版： 非完整版： 建议我们在开发的时候，使用非完整版本，当然这个是视实际开发情况来看，仅仅是建议。
使用 vue 的时候，我们可以直接 cdn 引入，即在 html 文件中使用 script 标签去引入。也可以使用 webpack 引入，默认使用 webpack 引入的是非完整版，如果要使用完整版本的话，需要配置 alias。还可以使用@vue/cli 引入，这种方法默认也是非完整版，想要使用完整版本，可以去查看 vuejs相关文档。
2：template 和 render 怎么用 2.1》template：string 类型；一个字符串模板；作为 Vue 实例的标识使用。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;如果引用的是完整版的 vue，那么在 new Vue 的时候，里面的参数对象可以有一个 template 的属性，值就是 html 内容。如下：
 new vue({ template: `&amp;lt;div id=&amp;quot;app1&amp;quot; class=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;span id=&amp;quot;number&amp;quot;&amp;gt;HELLO WORLD&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;` });  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;如果引用的是非完整版的 vue，那么是在新建的 vue 文件中，将 html 内容写在 template 的标签中。如下：</description>
    </item>
    
    <item>
      <title>MVC设计模式</title>
      <link>http://angelafang.top/2020/mvc%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 11 Feb 2020 20:06:37 +0800</pubDate>
      
      <guid>http://angelafang.top/2020/mvc%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>本篇文章介绍 MVC 设计模式。主要内容有： 1:MVC
2:关于 eventBus
3:表驱动编程
4:其他
1:MVC &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;关于经典的设计模式 MVC，M(model)数据模型，负责操作所有数据，V(view)视图，负责操作所有 ui 界面，C(controler)控制器，前两者之外的就放在这个模块。模块化之后，需要操作哪个部分，就可以直接去该部分修改。在实际操作中，会发现，view 模块和 controller 模块联系紧密，因此将其合为一个 view 模块，而现今流行的 vue 框架，则是将三个模块全部整合在了一起。因为比较简单的需求，这三个模块合在一起是完全 ok 的。掌握了 MVC 这个思想会让你对整个操作，心里有一个清晰的把握，知道是哪个部分，妥善处理数据视图之间的关系。也会更加清楚的理解这些流行框架的设计思想。对于 MVC，一般我们的设计是这样的：
1》M 模块，有数据 data 以及对数据的操作。
const model = { data:xxxx,//数据 //对数据的操作，增删改查 create(){/_对数据的增操作_/}, delete(){/_对数据的删除操作_/}, update(){/_对数据的修改操作_/}, get(){/_对数据的获取操作_/}, };  将上述代码抽象成类，就是这样：
class Model{ constructor(data){ this.data = data; this.updateData = function(){ /_对数据的修改操作_///每个实例对象的操作是不一样的 } }, //对数据的操作，增删改查，这些是实例对象共有的方法 create(){/_对数据的增操作_/}, delete(){/_对数据的删除操作_/}, update(){/_对数据的修改操作_/}, get(){/_对数据的获取操作_/}, }  另外这里我们需要注意，当抽象成 Model 类，对于生成的每个实例对象的操作是不一样的，因此我们在定义 Model 类的时候，将其操作的方法也放在了 constructor 里面,如上面代码中的 updateData 方法。这样在生成实例对象的时候，用户就可以把对该实例对象的操作传过去。因为每个实例对象对数据的操作是不一样的。另外，也在 Model 类中保留了一些数据操作方法的原型 create，delete，update,get 方法。若所有生成的实例对象中都有些对数据相同的操作，即可放在这里面。</description>
    </item>
    
    <item>
      <title>Ajax封装以及Promise</title>
      <link>http://angelafang.top/2020/ajax%E5%B0%81%E8%A3%85vv%E4%BB%A5%E5%8F%8Apromise/</link>
      <pubDate>Wed, 29 Jan 2020 22:02:05 +0800</pubDate>
      
      <guid>http://angelafang.top/2020/ajax%E5%B0%81%E8%A3%85vv%E4%BB%A5%E5%8F%8Apromise/</guid>
      <description>ajax ajax：Async Javascript And Xml 一般来说请求和响应是浏览器发给服务器的。AJAX是浏览器上的功能。浏览器在window上加了一个XMLHttpRequest函数，用这个构造函数（类）可以构造出一个对象，js通过它发起请求以及接收响应。 使用ajax发送请求，分为四步： 第一步创建XMLHttpRequest对象， 第二步调用对象的open方法,open方法里要传入请求的路径以及方法 第三步监听对象的onreadystatechange事件,在事件处理函数中进行操作 第四步调用对象的send方法（发送请求） var request = new XMLHttpRequest(); request.open(method,url); request.onreadyStateChange = ()=&amp;gt;{}; request.send();
1》闭包 什么是闭包，闭包的用途是什么，闭包的缺点是什么？
闭包：能够读取其他函数内部变量的函数，在js中，只有定义在函数内部的子函数才能够读取局部变量，因此把闭包理解成一个定义在函数内部的函数。可以把它看作是连接函数内部和函数外部的桥梁。【使用了外部的变量】
用途：就是读取函数内部变量，使得变量的值一直保存在内存中。 【隐藏局部变量，暴露操作函数 举例：
const createAdd = ()=&amp;gt;{ let n = 0 return ()=&amp;gt;{ n += 1 console.log(n) } } const add = createAdd() add() // 1 add() // 2  】
缺点：由于变量一直保存在内存中，会导致内存消耗大，使得网页性能低下。所以在退出函数之前，将不使用的局部变量全部删除。而且由于它能够在父函数外部改变内部变量的值，使得数据不安全。【容易内存泄漏】 代码举例：
function addAge(){ let age = 21; return function(){ age++; console.log(age); } } const closure = addAge; closure(); closure()();  请理解下面的两个例子，另外注意this！！！</description>
    </item>
    
    <item>
      <title>2020w</title>
      <link>http://angelafang.top/2020/2020w/</link>
      <pubDate>Sun, 05 Jan 2020 21:07:21 +0800</pubDate>
      
      <guid>http://angelafang.top/2020/2020w/</guid>
      <description>2020test</description>
    </item>
    
    <item>
      <title>浅谈jQuery</title>
      <link>http://angelafang.top/2020/%E6%B5%85%E8%B0%88jquery/</link>
      <pubDate>Sun, 05 Jan 2020 11:39:13 +0800</pubDate>
      
      <guid>http://angelafang.top/2020/%E6%B5%85%E8%B0%88jquery/</guid>
      <description>Everyday is an opportunity to learn and grow。
现在是公元 0202 年，1 月 5 日，腊月十一。距离农历新年还不到 二十 天了，加油鸭
本篇文章主要总结梳理最近一段时间对 jQuery 的学习理解，主要内容：
1:jQuery 的设计思想
2:具体分析
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.1:获取元素
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.2:元素操作
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.3:链式操作
前言：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; jQuery 是目前使用最为广泛的 js 函数库，经久不衰。这在前端业界内是一个奇观，目前还没有哪一个库能像它这样，有长达十几年的寿命，地位仍屹立不倒，不得不称之为经典。这要归功于它的设计思想。感谢那些为此付出了心血的前辈们。对于网页开发者来说，学好 jQuery 是必要的。通过学习 jQuery，我们可以了解业界最通用的技术，为将来学习更高级的库打基础。
自己的碎碎念：
jQuery 就是获取元素，进行操作。通过 jQuery 构造函数构造出一个 jQuery 对象，该对象可以对选择到的元素进行操作（使用了闭包来隐藏细节，只要 jQuery 对象存在，对应要获取的元素就也一直存在。），操作之后返回的还是 jQuery 对象，因此可以进行链式操作。jQuery 别出心裁的没有使用 new 来构造对象;而且用别名$.fn代替$.prototype,jQuery()也简写为$();闭包隐藏细节;getter/setter;$()可以接受不同的参数，重载;以及根据不同的浏览器采用不同的代码，适配。
1:jQuery 的设计思想 jQuery 核心思想是：获取元素，对其操作。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在使用 jQuery 的时候，首先根据选择需要，去获取相对应的元素，接着返回一个 jQuery 对象，而不是返回获取到的元素。重点在于返回的这个 jQuery 对象，提供了许多 api，去操作获取的元素！！！
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(这用到了使用闭包来隐藏细节，只要这个 jQuery 对象一直存在，查找到的元素也会一直存在。还有链式操作，因为每次操作，返回的都是 jQuery 对象。)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这样我们就可以对目标元素进行一系列的操作，所有操作都可以连接在一起，以链条的形式写出来，这就是链式操作。这是因为jQuery 的每一步操作，返回的都是一个 jQuery 对象。另外 jQuery 还提供了 end()方法来返回到上一个结果集。</description>
    </item>
    
    <item>
      <title>算法总结</title>
      <link>http://angelafang.top/2019/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 21 Dec 2019 12:09:37 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>本篇文章主要介绍常见的几种排序算法，主要内容：
1:前言
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.1:递归和循环
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.2:找出数组中的最小值
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.2.1:使用递归找出数组中的最小值
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.2.2:使用循环找出数组中的最小值
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.3:找出数组中的最小值的下标
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.3.1:使用indexOf
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.3.2:使用循环
2:选择排序
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.1:递归实现
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.2:循环实现
3:快速排序
4:归并排序
5:计数排序
6:冒泡排序
7:插入排序
 让自身有价值。
现在距离 0202 年还不到 11 天了，加油鸭
1:前言 1.1：递归都可以用循环来实现。递归的关键点在于有一个结束的终止条件。{#a11}
1.2：找出一个数组中的最小数。(注意这里的数组默认其没有重复值){#a12} 1.2.1&amp;gt;用递归的方法：
思路：
》当一个数组里有两个数a,b的时候，就相互比较，取最小的。这也是终结条件，即当比较的数组中只剩两个数的时候！！！另外也可用js内置的API:Math.min.apply(null,[6,5])或者Math.min.call(null,6,5);就是求6，5这两个数中的最小值。
》当有三个数a,b,c的时候，可以看作a和X这两个数进行比较。而X就是b和c这两个数进行比较的结果。
》当有四个数a,b,c,d的时候，可以看作a和X这两个数进行比较。而X又是b,c,d三个数进行比较的结果。
》依次类推。当有n个数的时候，就是拿第一个数和 （剩余的n-1个数比较出来的结果）进行比较。
代码：
let min = (numbers)=&amp;gt;{ if(numbers.length&amp;gt;2){ return min([numbers[0],min(numbers.slice(1)])); } return numbers[0]&amp;lt;numbers[1]?numbers[0]:numbers[1]; }; let arr = [7,9,5,6,3,1,4]; var res = min(arr); console.log(res);  运行实例如下：  1.2.2&amp;gt;用循环的方法：
思路：
》定义一个变量a去存放数组中的第一个数，然后从数组下标为1开始，遍历循环，每次将遍历循环数组中的数与变量a进行比较，将得到的最小值赋值给a。这样遍历下来，a就是该数组中最小的数值。
代码：
let min = (numbers)=&amp;gt;{ let minn=numbers[0] for(let i=1;i&amp;lt;numbers.</description>
    </item>
    
    <item>
      <title>Js全解实战之太极</title>
      <link>http://angelafang.top/2019/js%E5%85%A8%E8%A7%A3%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%AA%E6%9E%81/</link>
      <pubDate>Sun, 08 Dec 2019 20:47:50 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/js%E5%85%A8%E8%A7%A3%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%AA%E6%9E%81/</guid>
      <description>本篇文章是 js 全解实战之太极,讲的是做一个旋转的太极，并且在页面上动态的展示所写的代码。主要内容有： 1:重点一：将所写的内容动态显示在页面上
2:重点二：将所写的CSS样式应用在页面上
3:重点三：画会动的太极
4:重点四：适配移动端
点击查看预览效果。
重点一：将所写的内容动态显示在页面上 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1》动态展示：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setTimeout 可以间隔一个固定的时间去执行这个操作，但是该操作只执行一次，setInterval 可以连续的操作，每次都间隔一个固定的时间。但是考虑到 setInterval 不方便取消操作，一般采用的是递归的 setTimeout。利用递归的 setTimeout 函数模拟 setInterval，可以随时停止，这是它的好处。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;做法：将所做的操作写作一个函数 fun1，里面用到了 setTimeout 函数，然后在 setTimeout 这个函数体内写所需要的操作，并且继续调用 fun1 这个函数本身。当然，在调用 fun1 函数的时候，需要加判断，当满足终止条件后，就不再调用 fun1 函数，return 即可。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;例子：(html 页面里有一个 id 为 wenzi 的 span 标签，标签里会动态的展示数字，从 0 依次加 1，每 1s 变一次，直至变到 10 之后停止。)下面是 js 代码，主要看函数 fun1！
let wenzi = document.queryselector(&amp;quot;#wenzi&amp;quot;); let n = 0; let fun1 = ()=&amp;gt;{ seTimeout(()=&amp;gt;{wenzi.innerHTML = n; n+=1; if(n&amp;lt;=10){ fun1(); } },1000);};  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2》动态展示一段文字：</description>
    </item>
    
    <item>
      <title>Js函数的执行时机</title>
      <link>http://angelafang.top/2019/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Fri, 06 Dec 2019 08:45:30 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>本篇文章介绍 js 函数的执行时机,主要内容有：
1:为什么会打印出 6 个 6
2:怎样打印出 0,1,2,3,4,5
3:其他的方法
4:碎碎念
请看下面的代码：
let i=0; for(i=0;i&amp;lt;6;i++){ console.log(i); }  执行后的结果： 再看下面这个代码：
let i=0; for(i=0;i&amp;lt;6;i++){ setTimeout(()=&amp;gt;console.log(i),10); }  执行后的结果： 上面两个结果不同，原因在哪里？原因就出在 setTimeout 这个函数上面。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最上面的代码，它的执行时机是按照顺序，依次执行，循环一下，打印一下 i 的值。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;但是 setTimeout 函数,是异步任务，执行到这里的操作会被浏览器丢到另一个任务队列里去。 浏览器这时候会继续执行 for 循环。每一次 for 循环的时候，setTimeout 都执行一次，但是里面的函数没有被执行，而是被放到了任务队列里面，等待执行。for 循环了 6 次，就放了 6 次，当主线程执行完成后，才进入任务队列里面执行。这时候因为 for 循环 i=6 了，所以输出的全部都是 6。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;如何理解异步呢？异步代码不等待结果，直接进行下面的代码，所以定时器只是开启了，而没有立即执行里面的代码，等到当前运行坏境的代码执行完之后再回来执行定时器里面的代码。总结：异步就是不等待结果的代码。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（setTimeout(语句 W,10)这里的 10 表示是等待现在的代码执行完，10 毫秒后就立即执行 setTimeout 里面的语句 W，若为数字 X，表示执行完现在的代码，等待 X 毫秒后，去执行语句 W）。
那么如何才能在第二个代码中，让它的结果也能依次输出 0，1，2，3，4，5 呢？ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;js 给我们提供了 let 和 for 搭配使用，就可以办到。原理：let 为代码块的作用域，所以每一次 for 循环，console.</description>
    </item>
    
    <item>
      <title>Js基本语法</title>
      <link>http://angelafang.top/2019/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Thu, 28 Nov 2019 15:30:49 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>本篇文章是关于 js 的概览，主要内容：
1:表达式与语句
2:注意事项
3:标识符
4:注释
5:区块 block
6:条件语句
7:循环语句
8:break&amp;amp;&amp;amp;continue
9:label
 js 之父布兰登如此评价 js：它的原创之处并不优秀，优秀之处并非原创。哈哈哈哈，好打脸，那为什么它还被学习，因为它有价值，能产生价值，带来价值。
现在距离 0202 年还不到 35 天，我们现在学习的就是 ES6 了。一句话，取其精华，弃其糟粕。
1:表达式和语句 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;先要区分一下表达式和语句。语句是为了完成某种任务而进行的操作，下面就是一行赋值语句：
var a = 1 + 3;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这条语句先用 var 命令，声明了一个变量 a，然后将表达式 1+3 的运算结果赋值给变量 a。1+3 叫做表达式，指一个为了得到返回值的计算式。语句和表达式区别在于：前者为了进行某种操作，一般情况下不需要返回值，后者则是为了得到返回值，一定会返回一个值。详细的可以参考这篇文章。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表达式：1+2 表达式的值是 3；add(1+2)表达式的值为函数的返回值 3；console.log 表达式的值是函数本身；console.log(&amp;lsquo;3&amp;rsquo;)表达式的值是 undefined（这里解释一下，console.log(&amp;lsquo;3&amp;rsquo;)表达式的值是函数 log 的返回值，而函数 log 返回值是 undefined。但该函数功能是会执行输出打印 3。）。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;二者区别：一般来说，表达式都是有值的，语句可有可没有。语句通常会改变环境的，比如说声明，赋值。这两句话并不是绝对的。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这里还要提一下值和返回值的概念。注意只有函数才有返回值。
2:注意事项 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;js 中对大小写是敏感的；对空格和回车一般没关系，只有一个特殊情况：那就是 return 后不能跟回车。return 后若跟回车，会默认 return 一个 undefined。
3:标识符 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;标识符标识符规则：可以以 unicode 字母，中文，_或者\$开头，但是不能以数字打头。后面的字符，除了前面提到的，还可以有数字。变量名也是标识符。
4:注释 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;注释并不是越多越好。好的注释：踩坑注释；为什么代码会写得这么奇怪，遇到什么 bug</description>
    </item>
    
    <item>
      <title>浅谈js</title>
      <link>http://angelafang.top/2019/%E6%B5%85%E8%B0%88js/</link>
      <pubDate>Mon, 25 Nov 2019 11:35:40 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/%E6%B5%85%E8%B0%88js/</guid>
      <description>本篇文章是关于 js 的概览，主要内容：
1:常见浏览器及其内核介绍
2:JS 发展历史以及标准
1:常见浏览器及其内核介绍 1：浏览器内核简要说明：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一个完整的浏览器包含浏览器内核和浏览器的外壳（shell）。浏览器内核又可以分为两部分：渲染引擎（Layout Engine 或 Rendering Engine）和 JS 引擎。由于 JS 引擎越来越独立，内核就倾向于只指渲染引擎。
2：常见的浏览器及其内核介绍：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;浏览器的内核的种类很多，常见的浏览器内核可以分为四种：Trident、Gecko、Blink、Webkit。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（1）Trident (IE 内核):国内很多的双核浏览器的其中一核便是 Trident，美其名曰 &amp;ldquo;兼容模式&amp;rdquo;。代表： IE、傲游、世界之窗浏览器、Avant、腾讯 TT、猎豹安全浏览器、360 极速浏览器、百度浏览器等。Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML，但其实现 Edge 浏览器使用的是 Chrome 浏览器的内核。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（2）Gecko(firefox):Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如打开速度慢、升级频繁。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（3）webkit(Safari):Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。代表浏览器：傲游浏览器 3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian 手机浏览器、Android 默认浏览器。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（4）Chromium/Bink(chrome):在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用 Blink 内核。Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink 内核；</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://angelafang.top/2019/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Thu, 21 Nov 2019 17:08:56 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/%E6%B5%85%E6%9E%90url/</guid>
      <description>本篇文章大概介绍一下 URL,主要内容有：
1:URL 
2:DNS 以及 nslookup 命令
3:IP 以及 ping 命令
4:域名 
李爵士发明了 www，万维网。WWW=URL+HTTP+HTML。
在搜索资料的时候，发现 CSDN 上这篇博客写的很好，可以看一下CSDN。
1:URL &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;统一资源定位符（英语：Uniform Resource Locator，缩写：URL；或称统一资源定位器、定位地址、URL 地址，俗称网页地址或简称网址）是因特网上标准的资源的地址（Address），如同在网络上的门牌。统一资源定位符的标准格式如下： [协议类型]://[服务器地址]:[端口号]/[资源层级 UNIX 文件路径][文件名]?[查詢]#[片段 ID]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;统一资源定位符的完整格式如下： [协议类型]://[访问资源需要的凭证信息]@[服务器地址]:[端口号]/[资源层级 UNIX 文件路径][文件名]?[查詢]#[片段 ID]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其中[访问凭证信息]、[端口号]、[查询]、[片段 ID]都属于选填项。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;用自己的话总结就是通过 URL，你告诉了浏览器它所需要发现并连接的网络服务器地址，以及获取服务器上的页面路径。（不过在浏览器发送 HTTP 请求之前，它首先要与目标网络服务器建立 TCP 连接。然后，浏览器再通过 TCP 连接发送 HTTP 请求至服务器，并等待服务器返回 HTTP 响应。当浏览器收到响应的时候，就会在页面上显示响应的内容。）URL 包含协议，域名或者 IP，端口，路径，查询参数，锚点，其中查询参数和锚点也可以没有。协议是用来规定请求以及响应的格式是什么，常用的有 http 和 https 这两种协议。域名或者 IP 就是要请求的网址。端口是请求的服务类型，不同的服务对应不同的端口，而常用的就是 80 或者 443 端口。不同的路径请求不同的页面。加上查询参数，可以显示不同的查询内容。锚点是具体在一个页面上，定位到一个页面的具体位置。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;例如：1》https://developer.mozilla.org/zh-CN/docs/Web/HTML#高级主题（https://developer.mozilla.org/zh-CN/docs/Web/HTML#%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98）
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2》https://www.baidu.com/baidu?wd=hugo&amp;amp;tn=monline_4_dg
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1 和 2 中：https 就是协议，developer.mozilla.org 和 www.baidu.com 是域名， zh-CN/docs/Web/HTML 和/baidu 是路径，?</description>
    </item>
    
    <item>
      <title>CSS入门2</title>
      <link>http://angelafang.top/2019/css%E5%85%A5%E9%97%A82/</link>
      <pubDate>Tue, 19 Nov 2019 17:54:53 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/css%E5%85%A5%E9%97%A82/</guid>
      <description>本篇文章开始具体介绍 CSS,主要内容有：
1:CSS 布局
2:CSS 定位
3:浏览器渲染原理
4:CSS 动画的两种做法（transition 和 animation）
这里区分一下布局和定位的区别：布局是在屏幕平面上的，而定位则是垂直于屏幕屏幕 1:CSS 布局 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;布局分为固定宽度布局和不固定宽度布局。顾名思义，固定宽度就是宽度是指定的，确定的，无法变化，宽度一般有 960px，1000px，1024px 等。此外还有两者都结合的响应式布局，即 pc 上固定宽度，但在移动端是不固定宽度的。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 一》在布局的时候，考虑的思路如下：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1：需要兼容 IE9 吗？是的话，就采用 float 布局。不是的话，进入第二步；
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2：只兼容最新浏览器吗？是的话，就采用 grid 布局。不是的话，就用 flex 布局。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;注意：当使用 float 或者 flex 布局的时候，有时候会采用负的 margin 值。使用 float 布局的时候，一定不要忘了给父元素清除浮动.clearfix{content:&amp;ldquo;;display:block;clear:both;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 二》使用 float 布局
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 给子元素设置 width 和 float:left/right。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 给父元素添加.clearfix。.clearfix::after{content:&amp;ldquo;;display:block;clear:both;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 一般最后一个不设置宽度或者留一些空间，也可以设置一个最大宽度。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 用 float 布局就不需要做响应式。（因为手机上没有 IE，而这个布局是专为 IE 设计的）
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IE6/7 存在双倍 margin bug。解决方法，把 margin 值减半或者将元素 display：inline-block。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 实践：</description>
    </item>
    
    <item>
      <title>CSS入门1</title>
      <link>http://angelafang.top/2019/css%E5%85%A5%E9%97%A81/</link>
      <pubDate>Fri, 08 Nov 2019 11:17:43 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/css%E5%85%A5%E9%97%A81/</guid>
      <description> 本篇文章大概介绍一下 CSS,主要内容有：
1:CSS 历史
2:CSS 语法
3:CSS 文档流
4:CSS 盒模型
另外关于 css，可以参考MDN。
1:CSS 历史 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HTML 是 Tim Berners-Lee（李爵士）发明的，一个很了不起的人物，和 linux 之父一样牛！！！他自己写了第一个浏览器，第一个服务器，用自己写的浏览器访问了自己写的服务器，发明了 WWW，同时发明了 HTML、HTTP 和 URL，实现了人类上网冲浪。
2:HTML 起手式 </description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>http://angelafang.top/2019/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Mon, 04 Nov 2019 16:53:20 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>本篇文章大概介绍一下HTML,主要内容有：
1:html之父
2:html起手式
3:常用的表章节的标签
4:全局属性
5:常用的内容标签
另外关于html，可以参考MDN。
1:李爵士-HTML之父 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HTML是Tim Berners-Lee（李爵士）发明的，一个很了不起的人物，和linux之父一样牛！！！他自己写了第一个浏览器，第一个服务器，用自己写的浏览器访问了自己写的服务器，发明了WWW，同时发明了HTML、HTTP和URL，实现了人类上网冲浪。
2:HTML起手式 &amp;lt;!DOCTYPE html&amp;gt;&amp;lt;!--这句话是指定文档类型--&amp;gt; &amp;lt;html lange=&amp;quot;en&amp;quot;&amp;gt;&amp;lt;!--html标签，可以将值改为zh-CN--&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;/&amp;gt;&amp;lt;!--指定文件编码格式--&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1.0&amp;quot;/&amp;gt;&amp;lt;!--适配于手机，但禁用缩放--&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;/&amp;gt;&amp;lt;!--告诉ie浏览器，使用最新内核--&amp;gt; &amp;lt;title&amp;gt;document&amp;lt;/title&amp;gt;&amp;lt;!--标题--&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;!--代码--&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  3:常用的表章节的标签 可以参考MDN
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;章节一类的标签可以分为两类，一类是内容分区元素，一类是文本内容元素。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;内容分区:内容分区元素允许你将文档内容从逻辑上进行组织划分。使用包括页眉(header)、页脚(footer)、导航(nav)和标题(h1~h6)等分区元素，来为页面内容创建明确的大纲，以便区分各个章节的内容。
   Syntax Description     header 用于展示介绍性内容，可能包含一些标题元素。   footer 表示最近一个章节内容或者根节点（sectioning root ）元素的页脚。   main 呈现了文档的body或应用的主体部分。   nav 表示页面的一部分，其目的是在当前文档或其他文档中提供导航链接。   h1–h6 标题(Heading)元素呈现了六个不同的级别的标题，h1级别最高，而h6级别最低。   section 表示包含在HTML文档中的独立部分，没有更具体的语义元素来表示，一般会包含一个标题。   article 表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构。​​   aside 表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;文本内容:使用 HTML 文本内容元素来组织在开标签body和闭标签 /body里的块或章节的内容。这些元素能标识内容的宗旨或结构，而这对于 accessibility 和 SEO 很重要。</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://angelafang.top/2019/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Wed, 16 Oct 2019 11:32:08 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>HTML 常用标签 a 标签 img 标签 table 标签 form 标签 碎碎念其他标签 a 标签 &amp;lt;a href=&amp;quot;//baidu.com&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;百度&amp;lt;/a&amp;gt;  作用:
&amp;nbsp;&amp;nbsp;跳转到外部页面;跳转到内部锚点;跳转到邮箱或电话。
常用属性:
&amp;nbsp;&amp;nbsp;1&amp;gt;href 表示超链接的地址，常用的形式:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;形式一之网址:&amp;nbsp;(http://baidu.com) &amp;nbsp;&amp;nbsp;(https://baidu.com) &amp;nbsp;&amp;nbsp;(//baidu.com)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[推荐用最后一种形式]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;形式二之路径:&amp;nbsp;(/a/b/c.html) &amp;nbsp;&amp;nbsp;(a/b/c.html)&amp;nbsp;&amp;nbsp;(index.html) &amp;nbsp;&amp;nbsp;(./index.html)
[这里要注意：作为一名前端人员，在本地预览自己的网页时，不要使用 file 协议去打开预览网页；而是要用 http-server 或者 parcel 去开启服务，使用 http 协议去打开网页。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;因为当使用 file 协议打开的时候，使用绝对路径如/a/b/c 的形式，这时候根目录对应的是当前的硬盘，就会去 “对应盘符/a/b/c”下找；但若使用 http 协议打开，根目录就是打开服务所在的目录。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;如下是在我本地电脑所做的实验。在 E 盘下新建一个目录 20191015-10，里面新建了 a-href.html 文件，还有 a 目录。同时 a 目录下，又新建了一个 b 目录，b 目录下新建了一个 c.html 文件。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;下图是我直接在资源管理器中，双击打开 a-herf.html 文件，可看到地址栏中的显示的路径 E:/20191015-10/a-href.html。将红线 1 标注处的地址栏中地址复制在控制台，会出现红线二标注的 file///E:20191015-10/a-href.html 字样，注意这里的 file 指的就是使用的 file 协议。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当我点击下图一矩形中为&amp;rdquo;超链接:/a/b/c.</description>
    </item>
    
    <item>
      <title>如何使用hugo搭建属于自己的博客</title>
      <link>http://angelafang.top/2019/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 12 Oct 2019 16:54:04 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid>
      <description>搭建一个属于自己的博客。 hugo:一个使用go语言写的博客生成器，速度快！ 官方网站的使用推荐说明：https://gohugo.io/getting-started/quick-start/ 下面是我自己动手搭建的总结，也是按照官网安装教程操作的。有一些操作是需要在github上操作，如有什么不清楚的，可以去github上搜索。首先你需要有github账号，下面还需要用到github的名字，这个只要你有github账号，自行去github上查看就可以了。如果是windows系统的电脑，电脑上还需要先安装Git Bash或者Cmder，请自行搜索安装教程。我的是windows10，安装的Cmder。（第一步到第十步，我在后面有具体的操作说明）
第一步:在自己电脑上安装hugo，【这一步可以通过使用Cmder，操作命令行去下载执行安装，也可以直接去网站手动下载执行安装】，windows系统的还要去配置系统环境变量Path。 第二步:在自己电脑上选择一个合适位置，使用工具Cmder或者Git Bash打开，输入命令hugo new site quickstart。*注意这里的quickstart就是要创建的存放博客文件夹的目录名字，建议将该文件夹的名字起为&amp;rdquo;你的github名.github.io.creator&amp;rdquo;或者&amp;rdquo;你的github名.github.io.generator&amp;rdquo;*【文件名前面&amp;rdquo;你的github名字.github.io&amp;rdquo;这些不要写错，后面的可以随便起,如也可以为&amp;rdquo;你的github名.github.io-creator&amp;rdquo;或者&amp;rdquo;你的github名.github.io-generator&amp;rdquo;等。github名字请自行去github中查看】 第三步:输入 cd quickstart（这里的quickstart就是上面第二步创建的文件夹名字） 第四步:输入 git init 第五步:输入 git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 第六步:输入 echo &amp;lsquo;theme = &amp;ldquo;ananke&amp;rdquo;&amp;rsquo; &amp;gt;&amp;gt; config.toml 第七步:输入 hugo new posts/my-first-post.md 第八步:输入 hugo server -D（这一步操作之后，如果还想继续输入命令，需要先CTRL+c中断后，才可以继续。一旦中断，就无法使用http://localhost:1313 去访问你的博客。若不想中断，又想继续输入命令行操作，可以再新开一个Cmder窗口，进入到当前的目录下，继续操作。） 第九步:编辑配置文件 【打开quickstart里的config.toml文件，根据自己的需要自行进行设置】 （这步可以不用操作，使用默认的。） 第十步:输入 hugo 上述步骤在hugo的官网上也可找到。上述步骤完成之后，我们可以在自己本地http://localhost:1313 查看到自己的博客。但是想要别人看到还是不行的。下面的步骤是将博客和github结合，使得我们的博客能够在网上被其他人看到。
第十一步:在quickstart目录下新建一个名为.gitignore的文件，然后编辑文件，里面写上/public/,保存即可。（*这一步的作用其实是为了在备份angelafangguyue.github.io.creator文件夹，将其上传到github上的时候，不上传public文件夹。public文件夹在后面会自己再初始化一个仓库，上传到github。这两个文件夹上传到github上的仓库也是不一样的。*） 第十二步:在public目录下，输入git init，初始化这个本地仓库；git add .；git commit -v(上面这些git命令，如有不懂的请自行搜索))。 第十三步:去git hub中创建一个空仓库，名字为&amp;rdquo;你的github名.github.io&amp;rdquo;(如我的仓库名就是angelafangguyue.github.io)如图二十一。即在GitHub上创建一个新的空仓库，只需要在红线标注1的地方填上名字，然后点击红线标注2的地方创建即可。 上：图二十一
第十四步:将本地的public仓库上传到angelafangguyue.github.io的远程仓库。具体操作就是在public目录下输入命令：git remote add origin 你的仓库地址（注意这里请使用ssh地址），git pull。这样就把public文件夹以及里面的内容上传到你创建的名为&amp;rdquo;你的github名.github.io&amp;rdquo;的仓库了。这时，去仓库的setting中，在图二十三的GitHub Pages中，选择master保存，图二十二，二十三。然后就可以得到一个网址，通过这个网址，可以打开你的博客。别人通过访问你的这个网址也可以看到你的博客。一般这个网址就是https://username.github.io 。username就是你的github名。 上：图二十二 上：图二十三
第十五步:绑定自己的域名。先去namesilo购买一个属于域名。照着github上的操作说明或者自行搜索即可。 下面是我第一步到第十步的实际操作具体步骤：
第一步： 去github网址 https://github.</description>
    </item>
    
    <item>
      <title>Third</title>
      <link>http://angelafang.top/2019/third/</link>
      <pubDate>Sat, 12 Oct 2019 10:27:07 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/third/</guid>
      <description>hi,第三次尝试</description>
    </item>
    
    <item>
      <title>第二篇博客</title>
      <link>http://angelafang.top/2019/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 12 Oct 2019 09:11:52 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>HI,这是第二篇博客。使用markdown去写 ooooo</description>
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>http://angelafang.top/2019/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 11 Oct 2019 11:07:52 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description> Angela Fang的第一篇博客 开播啦啦啦啦，撸起袖子干！！！ </description>
    </item>
    
  </channel>
</rss>