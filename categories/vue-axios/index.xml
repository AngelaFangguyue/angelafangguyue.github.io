<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue axios on Angela Fang&#39;s Blog</title>
    <link>http://angelafang.top/categories/vue-axios/</link>
    <description>Recent content in vue axios on Angela Fang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 01 May 2020 15:59:30 +0800</lastBuildDate>
    
	<atom:link href="http://angelafang.top/categories/vue-axios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在vue中封装axios</title>
      <link>http://angelafang.top/2020/%E5%9C%A8vue%E4%B8%AD%E5%B0%81%E8%A3%85axios/</link>
      <pubDate>Fri, 01 May 2020 15:59:30 +0800</pubDate>
      
      <guid>http://angelafang.top/2020/%E5%9C%A8vue%E4%B8%AD%E5%B0%81%E8%A3%85axios/</guid>
      <description>axios 是 Vue 官方推荐的一个 HTTP 库，用 axios 官方简介来介绍它，就是：Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。
虽然，axios 是个优秀的 HTTP 库，但是，直接在项目中使用并不是那么方便，所以，我们需要对其进行一定程度上的配置封装，减少重复代码，方便调用。
在 vue 项目中，和后台交互获取数据这块，我们通常使用的是 axios 库，它是基于 promise 的 http 库，可运行在浏览器端和 node.js 中。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换 json、客户端防御 XSRF 等
其实，网上关于 axios 封装的代码不少，但是大部分都是在入口文件（main.js）中进行 axios 全局对象属性定义的形式进行配置，类似于如下代码：
axios.defaults.timeout = 10000  该方案有两个不足，首先，axios 封装代码耦合进入入口文件，不方便后期维护；其次，使用 axios 全局对象属性定义的方式进行配置，代码过于零散。
针对问题一，使用了 Vue 源码结构中的一大核心思想——将功能拆分为文件，方便后期的维护。单独创建一个 http.js 或者 http.ts 文件，在文件中引入 axios 并对其进行封装配置，最后将其导出并挂载到 Vue 的原型上即可。此时，每次修改 axios 配置，只需要修改对应的文件即可，不会影响到不相关的功能。
针对问题二，采用 axios 官方推荐的，通过配置项创建 axios 实例的方式进行配置封装。 代码如下：
// http.js import axios from &#39;axios&#39; // 创建 axios 实例 const service = axios.</description>
    </item>
    
  </channel>
</rss>