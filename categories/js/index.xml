<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on Angela Fang&#39;s Blog</title>
    <link>http://angelafang.top/categories/js/</link>
    <description>Recent content in js on Angela Fang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sun, 08 Dec 2019 20:47:50 +0800</lastBuildDate>
    
	<atom:link href="http://angelafang.top/categories/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Js全解实战之太极</title>
      <link>http://angelafang.top/2019/js%E5%85%A8%E8%A7%A3%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%AA%E6%9E%81/</link>
      <pubDate>Sun, 08 Dec 2019 20:47:50 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/js%E5%85%A8%E8%A7%A3%E5%AE%9E%E6%88%98%E4%B9%8B%E5%A4%AA%E6%9E%81/</guid>
      <description>本篇文章是 js 全解实战之太极,讲的是做一个旋转的太极，并且在页面上动态的展示所写的代码。主要内容有： 1:重点一：将所写的内容动态显示在页面上
2:重点二：将所写的CSS样式应用在页面上
3:重点三：画会动的太极
4:重点四：适配移动端
点击查看预览效果。
重点一：将所写的内容动态显示在页面上 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1》动态展示：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setTimeout 可以间隔一个固定的时间去执行这个操作，但是该操作只执行一次，setInterval 可以连续的操作，每次都间隔一个固定的时间。但是考虑到 setInterval 不方便取消操作，一般采用的是递归的 setTimeout。利用递归的 setTimeout 函数模拟 setInterval，可以随时停止，这是它的好处。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;做法：将所做的操作写作一个函数 fun1，里面用到了 setTimeout 函数，然后在 setTimeout 这个函数体内写所需要的操作，并且继续调用 fun1 这个函数本身。当然，在调用 fun1 函数的时候，需要加判断，当满足终止条件后，就不再调用 fun1 函数，return 即可。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;例子：(html 页面里有一个 id 为 wenzi 的 span 标签，标签里会动态的展示数字，从 0 依次加 1，每 1s 变一次，直至变到 10 之后停止。)下面是 js 代码，主要看函数 fun1！
let wenzi = document.queryselector(&amp;quot;#wenzi&amp;quot;); let n = 0; let fun1 = ()=&amp;gt;{ seTimeout(()=&amp;gt;{wenzi.innerHTML = n; n+=1; if(n&amp;lt;=10){ fun1(); } },1000);};  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2》动态展示一段文字：</description>
    </item>
    
    <item>
      <title>Js基本语法</title>
      <link>http://angelafang.top/2019/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Thu, 28 Nov 2019 15:30:49 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>本篇文章是关于 js 的概览，主要内容：
1:表达式与语句
2:注意事项
3:标识符
4:注释
5:区块 block
6:条件语句
7:循环语句
8:break&amp;amp;&amp;amp;continue
9:label
 js 之父布兰登如此评价 js：它的原创之处并不优秀，优秀之处并非原创。哈哈哈哈，好打脸，那为什么它还被学习，因为它有价值，能产生价值，带来价值。
现在距离 0202 年还不到 35 天，我们现在学习的就是 ES6 了。一句话，取其精华，弃其糟粕。
1:表达式和语句 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;先要区分一下表达式和语句。语句是为了完成某种任务而进行的操作，下面就是一行赋值语句：
var a = 1 + 3;  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这条语句先用 var 命令，声明了一个变量 a，然后将表达式 1+3 的运算结果赋值给变量 a。1+3 叫做表达式，指一个为了得到返回值的计算式。语句和表达式区别在于：前者为了进行某种操作，一般情况下不需要返回值，后者则是为了得到返回值，一定会返回一个值。详细的可以参考这篇文章。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;表达式：1+2 表达式的值是 3；add(1+2)表达式的值为函数的返回值 3；console.log 表达式的值是函数本身；console.log(&amp;lsquo;3&amp;rsquo;)表达式的值是 undefined（这里解释一下，console.log(&amp;lsquo;3&amp;rsquo;)表达式的值是函数 log 的返回值，而函数 log 返回值是 undefined。但该函数功能是会执行输出打印 3。）。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;二者区别：一般来说，表达式都是有值的，语句可有可没有。语句通常会改变环境的，比如说声明，赋值。这两句话并不是绝对的。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这里还要提一下值和返回值的概念。注意只有函数才有返回值。
2:注意事项 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;js 中对大小写是敏感的；对空格和回车一般没关系，只有一个特殊情况：那就是 return 后不能跟回车。return 后若跟回车，会默认 return 一个 undefined。
3:标识符 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;标识符标识符规则：可以以 unicode 字母，中文，_或者\$开头，但是不能以数字打头。后面的字符，除了前面提到的，还可以有数字。变量名也是标识符。
4:注释 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;注释并不是越多越好。好的注释：踩坑注释；为什么代码会写得这么奇怪，遇到什么 bug</description>
    </item>
    
    <item>
      <title>浅谈js</title>
      <link>http://angelafang.top/2019/%E6%B5%85%E8%B0%88js/</link>
      <pubDate>Mon, 25 Nov 2019 11:35:40 +0800</pubDate>
      
      <guid>http://angelafang.top/2019/%E6%B5%85%E8%B0%88js/</guid>
      <description>本篇文章是关于 js 的概览，主要内容：
1:常见浏览器及其内核介绍
2:JS 发展历史以及标准
1:常见浏览器及其内核介绍 1：浏览器内核简要说明：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一个完整的浏览器包含浏览器内核和浏览器的外壳（shell）。浏览器内核又可以分为两部分：渲染引擎（Layout Engine 或 Rendering Engine）和 JS 引擎。由于 JS 引擎越来越独立，内核就倾向于只指渲染引擎。
2：常见的浏览器及其内核介绍：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;浏览器的内核的种类很多，常见的浏览器内核可以分为四种：Trident、Gecko、Blink、Webkit。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（1）Trident (IE 内核):国内很多的双核浏览器的其中一核便是 Trident，美其名曰 &amp;ldquo;兼容模式&amp;rdquo;。代表： IE、傲游、世界之窗浏览器、Avant、腾讯 TT、猎豹安全浏览器、360 极速浏览器、百度浏览器等。Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML，但其实现 Edge 浏览器使用的是 Chrome 浏览器的内核。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（2）Gecko(firefox):Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如打开速度慢、升级频繁。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（3）webkit(Safari):Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。代表浏览器：傲游浏览器 3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian 手机浏览器、Android 默认浏览器。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;（4）Chromium/Bink(chrome):在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用 Blink 内核。Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink 内核；</description>
    </item>
    
  </channel>
</rss>